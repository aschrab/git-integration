git-integration(1)
==================

NAME
----
git-integration - Manage integration branches in Git

SYNOPSIS
--------
[verse]
'git integration' --create <name> [<base>]
'git integration' --edit [--create] [<branch>]
'git integration' --rebuild [<branch>]
'git integration' --continue | --abort

DESCRIPTION
-----------
Use 'git integration' to manage a branch which is the result of merging
several in-progress topic branches onto a base branch.

Say you are developing several new features on the branches 'feature-a',
'feature-b' and 'feature-c', while ongoing development is also happening on
the 'master' branch.  Using 'git integration' you can view the result of
merging all of the feature branches into 'master' and keep that branch updated
as all of these branches change.

So you start with the following:

    o---o master
        |\
        | o---o feature-a
         \
          o---o feature-b

when you create an integration branch including 'feature-a' and 'feature-b':

    git integration --create integration master
    git integration --edit

edit the instruction sheet to look like:
------
base master
merge feature-a
merge feature-b
------
then rebuild:

    git integration --rebuild

the result will be:

    o---o master
        |\
        | o---o feature-a
        |\     \
        | ------o---o integration
         \         /
          o---o---- feature-b

should further development then happen on 'master', rebuilding the integration
branch:

    git integration --rebuild integration

will give the following result:

    o---o---o---o master
        |        \
        |       --o---o integration
        |\     /     /
        | o---o     /  feature-a
         \         /
          o---o---- feature-b

OPTIONS
-------
--create::
	Create a new integration branch.  If '--edit' is also specified then
	the instruction sheet will be opened for editing, but the base branch
	cannot be specified explicitly.
+
The name of the integration branch must be specified.  If a second positional
argument is specified then it is used as the base branch, otherwise ``master''
will be used.

--edit::
	Edit the instruction sheet for an integration branch.  If '--create'
	is also specified then the integration branch need not already exist.
+
If no branch name is specified then the current branch must be an existing
integration branch.

--rebuild::
	Rebuild the integration branch.

--continue::
	Restart the building process after having resolved a merge conflict.

--abort::
	Abort the rebuild operation and reset HEAD to the original branch.

FORMAT OF INSTRUCTIONS
----------------------
The instruction sheet consists of a series of instructions which begin in
column zero, each of which may be followed by indented comments.  The
following instructions are supported:

base '<ref>'::
	Resets the state of the integration branch to the specified revision.
	This should always be the first instruction in the instruction sheet,
	and should appear only at the top of the instruction sheet.

merge '<ref>'::
	Merges the specified ref into the integration branch.  Any comments
	following the instruction are appended to the merge commit's commit
	message.

Example
~~~~~~~
------
base master

merge my-experimental-feature

  I think this is a good idea, but want to dogfood it before I
  decide whether to submit it upstream.

merge my-site-specific-changes

  Some changes to suit my environment.  DO NOT SUBMIT THESE.
------

SHARING INSTRUCTION SHEETS
--------------------------
The instruction sheet is just another Git branch, except that it is under
'refs/insns/' and not 'refs/heads/'.  This means that they can be shared in
the same way as other branches.

For example, to push the instruction sheet for 'pu':

	git push origin refs/insns/pu
